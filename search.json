[{"path":"https://yjunechoe.github.io/jlme/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 jlme authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://yjunechoe.github.io/jlme/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"June Choe. Author, maintainer.","code":""},{"path":"https://yjunechoe.github.io/jlme/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Choe J (2024). jlme: Regression Modelling 'GLM.jl' 'MixedModels.jl' 'Julia'. R package version 0.1.0, https://yjunechoe.github.io/jlme/.","code":"@Manual{,   title = {jlme: Regression Modelling with 'GLM.jl' and 'MixedModels.jl' in 'Julia'},   author = {June Choe},   year = {2024},   note = {R package version 0.1.0},   url = {https://yjunechoe.github.io/jlme/}, }"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"jlme","dir":"","previous_headings":"","what":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"Julia (mixed-effects) regression modelling R","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"can install development version jlme GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"yjunechoe/jlme\")"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"jlme uses {JuliaConnectoR} connect Julia session. See JuliaConnectoR package documentation troubleshooting related Julia installation configuration.","code":"library(jlme) jlme_setup()"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"using-jlme","dir":"","previous_headings":"","what":"Using {jlme}","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"set , (g)lm() (g)lmer complements Julia available via jlm() jlmer(), respectively.","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"fixed-effects-models","dir":"","previous_headings":"Using {jlme}","what":"Fixed effects models","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"jlm() lm()/glm() syntax: Contrasts factor columns preserved:","code":"# lm(mpg ~ hp, mtcars) jlm(mpg ~ hp, mtcars) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + hp #>  #> ──────────────────────────────────────────────────────────────────────────── #>                   Coef.  Std. Error      z  Pr(>|z|)   Lower 95%   Upper 95% #> ──────────────────────────────────────────────────────────────────────────── #> (Intercept)  30.0989      1.63392    18.42    <1e-75  26.8964     33.3013 #> hp           -0.0682283   0.0101193  -6.74    <1e-10  -0.0880617  -0.0483948 #> ──────────────────────────────────────────────────────────────────────────── x <- mtcars  # Sum code `am` x$am_sum <- factor(x$am) contrasts(x$am_sum) <- contr.sum(2) # Helmert code `cyl` x$cyl_helm <- factor(x$cyl) contrasts(x$cyl_helm) <- contr.helmert(3) colnames(contrasts(x$cyl_helm)) <- c(\"4vs6\", \"4&6vs8\")  jlm(mpg ~ am_sum + cyl_helm, x) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + am_sum + cyl_helm #>  #> ─────────────────────────────────────────────────────────────────────────────── #>                      Coef.  Std. Error      z  Pr(>|z|)  Lower 95%    Upper 95% #> ─────────────────────────────────────────────────────────────────────────────── #> (Intercept)       20.6739     0.572633  36.10    <1e-99   19.5516   21.7963 #> am_sum: 1         -1.27998    0.648789  -1.97    0.0485   -2.55158  -0.00837293 #> cyl_helm: 4vs6    -3.07806    0.767861  -4.01    <1e-04   -4.58304  -1.57308 #> cyl_helm: 4&6vs8  -2.32983    0.414392  -5.62    <1e-07   -3.14203  -1.51764 #> ───────────────────────────────────────────────────────────────────────────────"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"mixed-effects-models","dir":"","previous_headings":"Using {jlme}","what":"Mixed effects models","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"jlmer() lmer()/glmer() syntax:","code":"# lme4::lmer(Reaction ~ Days + (Days | Subject), sleepstudy) jlmer(Reaction ~ Days + (Days | Subject), lme4::sleepstudy, REML = TRUE) #> <Julia object of type LinearMixedModel> #>  #> Reaction ~ 1 + Days + (1 + Days | Subject) #>  #> Variance components: #>             Column    Variance Std.Dev.   Corr. #> Subject  (Intercept)  612.10016 24.74066 #>          Days          35.07171  5.92214 +0.07 #> Residual              654.94001 25.59180 #> ────────────────────────────────────────────────── #>                 Coef.  Std. Error      z  Pr(>|z|) #> ────────────────────────────────────────────────── #> (Intercept)  251.405      6.8246   36.84    <1e-99 #> Days          10.4673     1.54579   6.77    <1e-10 #> ────────────────────────────────────────────────── # lme4::glmer(r2 ~ Anger + Gender + (1 | id), VerbAgg, family = \"binomial\") jlmer(r2 ~ Anger + Gender + (1 | id), lme4::VerbAgg, family = \"binomial\") #> <Julia object of type GeneralizedLinearMixedModel> #>  #> r2 ~ 1 + Anger + Gender + (1 | id) #>  #> Variance components: #>       Column   VarianceStd.Dev. #> id (Intercept)  1.12074 1.05865 #> ──────────────────────────────────────────────────── #>                   Coef.  Std. Error      z  Pr(>|z|) #> ──────────────────────────────────────────────────── #> (Intercept)  -1.10115     0.280681   -3.92    <1e-04 #> Anger         0.0462741   0.0134906   3.43    0.0006 #> Gender: M     0.260057    0.153847    1.69    0.0910 #> ────────────────────────────────────────────────────"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"inspect-model-objects","dir":"","previous_headings":"Using {jlme}","what":"Inspect model objects","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"broom-style tidy() glance() methods Julia regression models:","code":"jmod <- jlmer(Reaction ~ Days + (Days | Subject), lme4::sleepstudy, REML = TRUE) tidy(jmod) #>      effect    group                  term     estimate std.error statistic #> 1     fixed     <NA>           (Intercept) 251.40510485  6.824597 36.838090 #> 2     fixed     <NA>                  Days  10.46728596  1.545790  6.771481 #> 12 ran_pars  Subject       sd__(Intercept)  24.74065797        NA        NA #> 3  ran_pars  Subject cor__(Intercept).Days   0.06555124        NA        NA #> 21 ran_pars  Subject              sd__Days   5.92213766        NA        NA #> 11 ran_pars Residual       sd__Observation  25.59179572        NA        NA #>          p.value #> 1  4.537101e-297 #> 2   1.274703e-11 #> 12            NA #> 3             NA #> 21            NA #> 11            NA glance(jmod) #>   nobs df   sigma logLik AIC BIC deviance df.residual #> 1  180  6 25.5918     NA  NA  NA 1743.628         174"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"parametric-bootstrap","dir":"","previous_headings":"Using {jlme}","what":"Parametric bootstrap","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"Experimental support MixedModels.parametricbootstrap via parametricbootstrap():","code":"samp <- parametricbootstrap(jmod, nsim = 100L, seed = 42L) samp #> <Julia object of type MixedModelBootstrap{Float64}> #> MixedModelBootstrap with 100 samples #>      parameter  min        q25         median     mean        q75        ⋯ #>    ┌────────────────────────────────────────────────────────────────────── #>  1 │ β1         227.464    246.465     250.903    250.985     256.233    ⋯ #>  2 │ β2         6.58801    9.89368     10.8208    10.6993     11.6945    ⋯ #>  3 │ σ          21.6863    24.654      25.6209    25.8437     26.7414    ⋯ #>  4 │ σ1         3.88389    19.505      24.0727    23.4107     27.6445    ⋯ #>  5 │ σ2         1.94609    4.90984     5.7615     5.87748     6.78987    ⋯ #>  6 │ ρ1         -0.731457  -0.244892   0.0860377  0.0721117   0.345471   ⋯ #>  7 │ θ1         0.158103   0.742165    0.916954   0.910481    1.10115    ⋯ #>  8 │ θ2         -0.192962  -0.0589699  0.0187681  0.00944012  0.0653042  ⋯ #>  9 │ θ3         0.0        0.170524    0.21086    0.205921    0.255305   ⋯ tidy(samp) #>     effect    group                  term     estimate    conf.low   conf.high #> 1    fixed     <NA>           (Intercept) 251.40510485 240.6380312 263.5578907 #> 2    fixed     <NA>                  Days  10.46728596   7.6356537  13.6199271 #> 5 ran_pars  Subject       sd__(Intercept)  24.74065797  14.0417274  34.0473785 #> 4 ran_pars  Subject cor__(Intercept).Days   0.06555124  -0.6985657   0.8871578 #> 6 ran_pars  Subject              sd__Days   5.92213766   3.6415708   8.2434993 #> 3 ran_pars Residual       sd__Observation  25.59179572  22.4973967  29.1232267"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"full-interop-control-with-juliaconnector","dir":"","previous_headings":"","what":"Full interop control with {JuliaConnectoR}","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"","code":"library(JuliaConnectoR)"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"inspect-model-objects-1","dir":"","previous_headings":"Full interop control with {JuliaConnectoR}","what":"Inspect model objects","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"","code":"# List all properties of a MixedModel object # - Properties are accessible via `$` propertynames(jmod) # Or, `juliaCall(\"propertynames\", jmod)` #>  [1] \"A\"         \"b\"         \"beta\"      \"betas\"     \"corr\"      \"dims\"      #>  [7] \"feterm\"    \"formula\"   \"L\"         \"lambda\"    \"lowerbd\"   \"objective\" #> [13] \"optsum\"    \"parmap\"    \"PCA\"       \"pvalues\"   \"rePCA\"     \"reterms\"   #> [19] \"sigma\"     \"sigmarhos\" \"sigmas\"    \"sqrtwts\"   \"stderror\"  \"theta\"     #> [25] \"u\"         \"vcov\"      \"X\"         \"Xymat\"     \"y\"         \"β\"         #> [31] \"βs\"        \"θ\"         \"λ\"         \"σ\"         \"σs\"        \"σρs\" # Example 1: PCA of random effects jmod$rePCA #> <Julia object of type @NamedTuple{Subject::Vector{Float64}}> #> (Subject = [0.5327756193675971, 1.0],) # Collect as an R object (NamedTuple -> named list) juliaGet(jmod$rePCA) #> $Subject #> [1] 0.5327756 1.0000000 #>  #> attr(,\"JLTYPE\") #> [1] \"@NamedTuple{Subject::Vector{Float64}}\""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"create-bindings-to-julia-libs-to-access-more-features","dir":"","previous_headings":"Full interop control with {JuliaConnectoR}","what":"Create bindings to Julia libs to access more features","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"Use Julia(-esque) syntax R: See information running Julia environment (e.g., list loaded Julia libraries) jlme_status():","code":"MixedModels <- juliaImport(\"MixedModels\")  # Check singular fit MixedModels$issingular(jmod) # Or, `jlme::issingular(jmod)` #> [1] FALSE # Long-form construction of `jmod` jmod2 <- MixedModels$fit(   MixedModels$LinearMixedModel,   juliaEval(\"@formula(Reaction ~ Days + (Days | Subject))\"),   juliaPut(lme4::sleepstudy) )  # In complete Julia syntax, using the sleepstudy dataset from MixedModels.jl jmod3 <- juliaEval(\"   fit(     LinearMixedModel,     @formula(reaction ~ days + (days | subj)),     MixedModels.dataset(:sleepstudy)   ) \") jlme_status() #> Julia Version 1.10.3 #> Commit 0b4590a550 (2024-04-30 10:59 UTC) #> Build Info: #>   Official https://julialang.org/ release #> Platform Info: #>   OS: Windows (x86_64-w64-mingw32) #>   CPU: 8 × 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz #>   WORD_SIZE: 64 #>   LIBM: libopenlibm #>   LLVM: libLLVM-15.0.7 (ORCJIT, tigerlake) #> Threads: 1 default, 0 interactive, 1 GC (on 8 virtual cores) #>  #> Status `C:\\Users\\jchoe\\AppData\\Local\\Temp\\jl_eocScL\\Project.toml` #>   [38e38edf] GLM v1.9.0 #>   [98e50ef6] JuliaFormatter v1.0.60 #>   [ff71e718] MixedModels v4.25.3 #>   [3eaba693] StatsModels v0.7.4 #>   [9a3f8284] Random"},{"path":[]},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"data-type-conversion","dir":"","previous_headings":"Tips","what":"Data type conversion","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"sure pass integers functions expect Integer type, (e.g., MixedModels.parametricbootstrap() example ):","code":"# library(JuliaConnectoR) juliaPut(1) #> <Julia object of type Float64> #> 1.0 juliaPut(1L) #> <Julia object of type Int64> #> 1"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"performance-linear-algebra-backend","dir":"","previous_headings":"Tips","what":"Performance (linear algebra backend)","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"Using MKL.jl AppleAccelerate.jl may improve model fitting performance (see system requirements first).","code":"# Not run jlme_setup(add = \"MKL\", restart = TRUE) jlme_status() # Should see MKL loaded here"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"performance-data-transfer","dir":"","previous_headings":"Tips","what":"Performance (data transfer)","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"practice, overhead come transferring data R Julia. looking fit many models data, first filter keep used columns use jl_data() send data Julia. Julia data frame object can used fit Julia models. data custom contrasts, can use jl_contrasts() also convert Julia first passing model.","code":"data_r <- mtcars  # Keep only columns you need + convert with `jl_data()` data_julia <- jl_data(data_r[, c(\"mpg\", \"am\")])  jlm(mpg ~ am, data_julia) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + am #>  #> ──────────────────────────────────────────────────────────────────────── #>                 Coef.  Std. Error      z  Pr(>|z|)  Lower 95%  Upper 95% #> ──────────────────────────────────────────────────────────────────────── #> (Intercept)  17.1474      1.1246   15.25    <1e-51   14.9432     19.3515 #> am            7.24494     1.76442   4.11    <1e-04    3.78674    10.7031 #> ──────────────────────────────────────────────────────────────────────── data_r$am <- as.factor(data_r$am) contrasts(data_r$am) <- contr.sum(2)  data_julia <- jl_data(data_r[, c(\"mpg\", \"am\")]) contrasts_julia <- jl_contrasts(data_r)  jlm(mpg ~ am, data_julia, contrasts = contrasts_julia) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + am #>  #> ──────────────────────────────────────────────────────────────────────── #>                 Coef.  Std. Error      z  Pr(>|z|)  Lower 95%  Upper 95% #> ──────────────────────────────────────────────────────────────────────── #> (Intercept)  20.7698     0.882211  23.54    <1e-99   19.0407    22.4989 #> am: 1        -3.62247    0.882211  -4.11    <1e-04   -5.35157   -1.89337 #> ────────────────────────────────────────────────────────────────────────"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"just-learn-julia","dir":"","previous_headings":"Tips","what":"Just learn Julia","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"spend non-negligible time fitting regression models work, please just learn Julia! ’s great high-level language feels close R syntax REPL-based workflow.","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Regression Modelling with GLM.jl and MixedModels.jl in Julia","text":"JuliaConnectoR package powering R interface Julia. Julia packages GLM.jl MixedModels.jl fast implementations (mixed effects) regression models.","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers","text":"Helpers converting model specifications R Julia equivalents","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers","text":"","code":"jl_formula(x)  jl_contrasts(df, cols = NULL, show_code = FALSE)  jl_data(df)  jl_family(family = c(\"gaussian\", \"binomial\", \"poisson\"))"},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers","text":"x string formula object df data frame cols subset columns make contrast specifiations show_code Whether print corresponding Julia code side-effect family distributional family string <family> object","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers","text":"Julia object type <JuliaProxy>","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers","text":"","code":"# \\donttest{ jlme_setup(restart = TRUE)  # (Setup) Model data in R x <- mtcars x$cyl_helm <- factor(x$cyl) contrasts(x$cyl_helm) <- contr.helmert(3) colnames(contrasts(x$cyl_helm)) <- c(\"4vs6\", \"4&6vs8\")  # Formula conversion with julia_formula <- jl_formula(mpg ~ am * cyl_helm) julia_formula #> <Julia object of type FormulaTerm{Term, Tuple{Term, Term, InteractionTerm{Tuple{Term, Term}}}}> #> FormulaTerm #> Response: #>   mpg(unknown) #> Predictors: #>   am(unknown) #>   cyl_helm(unknown) #>   am(unknown) & cyl_helm(unknown)  # Data frame conversion julia_data <- jl_data(x) julia_data #> <Julia object of type Main.RConnector.RDataFrame> #> Main.RConnector.RDataFrame with 32 rows, 12 columns, and an unknown schema.  # Contrasts construction (`show_code = TRUE` pretty prints the Julia code) julia_contrasts <- jl_contrasts(x, show_code = TRUE) #> Dict( #>     :cyl_helm => HypothesisCoding( #>         [ #>             -1/2  1/2   0 #>             -1/6 -1/6 1/3 #>         ]; #>         levels = [\"4\", \"6\", \"8\"], #>         labels = [\"4vs6\", \"4&6vs8\"], #>     ), #> ) julia_contrasts #> <Julia object of type Dict{Symbol, HypothesisCoding{Matrix{Float64}, Matrix{Float64}}}> #> Dict{Symbol, HypothesisCoding{Matrix{Float64}, Matrix{Float64}}} with 1 entry: #>   :cyl_helm => HypothesisCoding{Matrix{Float64}, Matrix{Float64}}([-0.5 0.5 0.0…  # Family conversion julia_family <- jl_family(\"binomial\") julia_family #> <Julia object of type Bernoulli{Float64}> #> Bernoulli{Float64}(p=0.5)  stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a (mixed-effects) regression model in Julia — jlm","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"Fit (mixed-effects) regression model Julia","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"","code":"jlm(formula, data, family = \"gaussian\", contrasts = jl_contrasts(data), ...)  jlmer(   formula,   data,   family = NULL,   contrasts = jl_contrasts(data),   ...,   progress = interactive() )"},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"formula formula written Julia syntax. Can string language object. data data frame family distribution family contrasts Julia dictionary contrasts Inferred data default. ... Additional arguments fit() function called Julia progress Whether print model fitting progress. Defaults interactive()","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"julia model object class jlme","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"","code":"# \\donttest{ jlme_setup(restart = TRUE)  # Fixed effects models lm(mpg ~ hp, mtcars) #>  #> Call: #> lm(formula = mpg ~ hp, data = mtcars) #>  #> Coefficients: #> (Intercept)           hp   #>    30.09886     -0.06823   #>  jlm(mpg ~ hp, mtcars) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + hp #>  #> ──────────────────────────────────────────────────────────────────────────── #>                   Coef.  Std. Error      z  Pr(>|z|)   Lower 95%   Upper 95% #> ──────────────────────────────────────────────────────────────────────────── #> (Intercept)  30.0989      1.63392    18.42    <1e-75  26.8964     33.3013 #> hp           -0.0682283   0.0101193  -6.74    <1e-10  -0.0880617  -0.0483948 #> ────────────────────────────────────────────────────────────────────────────  # Auto-handling of contrasts x <- mtcars x$cyl_helm <- factor(x$cyl) contrasts(x$cyl_helm) <- contr.helmert(3) colnames(contrasts(x$cyl_helm)) <- c(\"4vs6\", \"4&6vs8\") lm(mpg ~ cyl_helm, x) #>  #> Call: #> lm(formula = mpg ~ cyl_helm, data = x) #>  #> Coefficients: #>    (Intercept)    cyl_helm4vs6  cyl_helm4&6vs8   #>         20.502          -3.460          -2.701   #>  jlm(mpg ~ cyl_helm, x) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + cyl_helm #>  #> ───────────────────────────────────────────────────────────────────────────── #>                      Coef.  Std. Error      z  Pr(>|z|)  Lower 95%  Upper 95% #> ───────────────────────────────────────────────────────────────────────────── #> (Intercept)       20.5022     0.593528  34.54    <1e-99   19.3389    21.6655 #> cyl_helm: 4vs6    -3.46039    0.779174  -4.44    <1e-05   -4.98754   -1.93324 #> cyl_helm: 4&6vs8  -2.70108    0.387175  -6.98    <1e-11   -3.45993   -1.94223 #> ─────────────────────────────────────────────────────────────────────────────  # Mixed effects models library(lme4) #> Loading required package: Matrix  glmer(r2 ~ Anger + Gender + (1 | id), VerbAgg, family = \"binomial\") #> Generalized linear mixed model fit by maximum likelihood (Laplace #>   Approximation) [glmerMod] #>  Family: binomial  ( logit ) #> Formula: r2 ~ Anger + Gender + (1 | id) #>    Data: VerbAgg #>       AIC       BIC    logLik  deviance  df.resid  #>  9504.505  9532.240 -4748.253  9496.505      7580  #> Random effects: #>  Groups Name        Std.Dev. #>  id     (Intercept) 1.059    #> Number of obs: 7584, groups:  id, 316 #> Fixed Effects: #> (Intercept)        Anger      GenderM   #>    -1.10090      0.04626      0.26002   jlmer(r2 ~ Anger + Gender + (1 | id), VerbAgg, family = \"binomial\") #> <Julia object of type GeneralizedLinearMixedModel> #>  #> r2 ~ 1 + Anger + Gender + (1 | id) #>  #> Variance components: #>       Column   VarianceStd.Dev. #> id (Intercept)  1.12073 1.05865 #> ──────────────────────────────────────────────────── #>                   Coef.  Std. Error      z  Pr(>|z|) #> ──────────────────────────────────────────────────── #> (Intercept)  -1.10111     0.28068    -3.92    <1e-04 #> Anger         0.0462722   0.0134905   3.43    0.0006 #> Gender: M     0.260065    0.153847    1.69    0.0909 #> ────────────────────────────────────────────────────  stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for interacting with Julia model objects and functions — jlme-model-helpers","title":"Helpers for interacting with Julia model objects and functions — jlme-model-helpers","text":"Helpers interacting Julia model objects functions","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for interacting with Julia model objects and functions — jlme-model-helpers","text":"","code":"propertynames(x)  issingular(x)"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for interacting with Julia model objects and functions — jlme-model-helpers","text":"x Julia model object","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers for interacting with Julia model objects and functions — jlme-model-helpers","text":"appropriate R object","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers for interacting with Julia model objects and functions — jlme-model-helpers","text":"","code":"# \\donttest{ jlme_setup(restart = TRUE)  x <- jlmer(r2 ~ Anger + (1 | id), lme4::VerbAgg, family = \"binomial\")  # `propertynames()` lists properties accessible via `$` propertynames(x) #>  [1] \"A\"         \"L\"         \"LMM\"       \"PCA\"       \"X\"         \"b\"         #>  [7] \"beta\"      \"coef\"      \"corr\"      \"lowerbd\"   \"objective\" \"rePCA\"     #> [13] \"resp\"      \"sigma\"     \"theta\"     \"u\"         \"vcov\"      \"wt\"        #> [19] \"y\"         \"β\"         \"θ\"         \"λ\"         \"σ\"         \"σs\"        #> [25] \"σρs\"        # `issingular()` reports whether model has singular fit issingular(x) #> [1] FALSE  stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-package.html","id":null,"dir":"Reference","previous_headings":"","what":"jlme: Regression Modelling with 'GLM.jl' and 'MixedModels.jl' in 'Julia' — jlme-package","title":"jlme: Regression Modelling with 'GLM.jl' and 'MixedModels.jl' in 'Julia' — jlme-package","text":"Bindings 'Julia' packages 'GLM.jl' doi:10.5281/zenodo.3376013  'MixedModels.jl' doi:10.5281/zenodo.12575371 , powered 'JuliaConnectoR'. Fits (generalized) linear (mixed-effects) regression models 'Julia' using familiar model fitting syntax R. Offers 'broom'-style data frame summary functionalities 'Julia' regression models.","code":""},{"path":[]},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"jlme: Regression Modelling with 'GLM.jl' and 'MixedModels.jl' in 'Julia' — jlme-package","text":"Maintainer: June Choe jchoe001@gmail.com (ORCID)","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Julia connection for jlme — check_julia_ok","title":"Set up Julia connection for jlme — check_julia_ok","text":"Set Julia connection jlme","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Julia connection for jlme — check_julia_ok","text":"","code":"check_julia_ok()  stop_julia()  jlme_status()  jlme_setup(   ...,   add = NULL,   restart = FALSE,   threads = NULL,   verbose = interactive() )"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up Julia connection for jlme — check_julia_ok","text":"... Unused add character vector additional Julia packages add load. restart Whether run stop_julia() first, attempting setup threads Number threads start Julia . Defaults 1 verbose Whether alert setup progress. Defaults interactive()","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up Julia connection for jlme — check_julia_ok","text":"Invisibly returns TRUE success","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up Julia connection for jlme — check_julia_ok","text":"","code":"if (FALSE) { # interactive() # Check whether Julia installation meets requirements check_julia_ok()  # Connect to a Julia runtime for use with `{jlme}` jlme_setup()  # Show information about the Julia runtime jlme_status()  # Stop Julia runtime stop_julia() }"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_tidiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidier methods for Julia regression models — tidy.jlmeboot","title":"Tidier methods for Julia regression models — tidy.jlmeboot","text":"Tidier methods Julia regression models","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_tidiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidier methods for Julia regression models — tidy.jlmeboot","text":"","code":"# S3 method for class 'jlmeboot' tidy(x, effects = c(\"var_model\", \"ran_pars\", \"fixed\"), ...)  # S3 method for class 'jlme' tidy(x, effects = c(\"var_model\", \"ran_pars\", \"fixed\"), ...)  # S3 method for class 'jlme' glance(x, ...)"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_tidiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidier methods for Julia regression models — tidy.jlmeboot","text":"x object class jlme effects One \"var_model\", \"ran_pars\", \"fixed\" ... Unused","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_tidiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidier methods for Julia regression models — tidy.jlmeboot","text":"data frame","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"Parametric bootstrap Julia mixed effects models","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"","code":"parametricbootstrap(x, nsim, seed, ..., ftol_rel = 1e-08)"},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"x Julia MixedModel class jlme nsim Number simulations seed Seed random number generator (Random.MersenneTwister) ... implemented ftol_rel convergence criterion. Defaults reduced-precision target 1e-8.","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"MixedModels.parametricboostrap() output object class jlmeboot","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"","code":"# \\donttest{ jlme_setup(restart = TRUE)  jmod <- jlmer(Reaction ~ Days + (Days | Subject), lme4::sleepstudy) tidy(jmod) #> # A tibble: 6 × 7 #>   effect   group    term                 estimate std.error statistic    p.value #>   <chr>    <chr>    <chr>                   <dbl>     <dbl>     <dbl>      <dbl> #> 1 fixed    NA       (Intercept)          251.          6.63     37.9   2.02e-314 #> 2 fixed    NA       Days                  10.5         1.50      6.97  3.22e- 12 #> 3 ran_pars Subject  sd__(Intercept)       23.8        NA        NA    NA         #> 4 ran_pars Subject  cor__(Intercept).Da…   0.0813     NA        NA    NA         #> 5 ran_pars Subject  sd__Days               5.72       NA        NA    NA         #> 6 ran_pars Residual sd__Observation       25.6        NA        NA    NA          samp <- parametricbootstrap(jmod, nsim = 100L, seed = 42L) samp #> <Julia object of type MixedModelBootstrap{Float64}> #> MixedModelBootstrap with 100 samples #>      parameter  min        q25        median     mean       q75        max #>    ┌─────────────────────────────────────────────────────────────────────────── #>  1 │ β1         228.0      246.58     250.863    250.977    256.082    264.406 #>  2 │ β2         6.72055    9.91274    10.8382    10.696     11.6725    13.7769 #>  3 │ σ          21.6863    24.6541    25.621     25.8379    26.7415    30.5993 #>  4 │ σ1         3.58936    17.8944    22.1002    21.5827    25.6263    31.9265 #>  5 │ σ2         1.63406    4.52796    5.36377    5.47516    6.3829     8.34495 #>  6 │ ρ1         -0.739908  -0.227009  0.121677   0.108275   0.39136    1.0 #>  7 │ θ1         0.146929   0.675799   0.84266    0.839684   1.02355    1.29195 #>  8 │ θ2         -0.18142   -0.0508    0.0248508  0.0156837  0.0707946  0.227983 #>  9 │ θ3         0.0        0.156764   0.192997   0.188327   0.239447   0.333976 #>   tidy(samp) #> # A tibble: 6 × 6 #>   effect   group    term                  estimate conf.low conf.high #>   <chr>    <chr>    <chr>                    <dbl>    <dbl>     <dbl> #> 1 fixed    NA       (Intercept)           251.      241.       263.   #> 2 fixed    NA       Days                   10.5       7.73      13.5  #> 3 ran_pars Subject  sd__(Intercept)        23.8      12.5       31.9  #> 4 ran_pars Subject  cor__(Intercept).Days   0.0813   -0.595      1    #> 5 ran_pars Subject  sd__Days                5.72      3.42       7.82 #> 6 ran_pars Residual sd__Observation        25.6      22.5       29.1   stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics glance, tidy","code":""},{"path":"https://yjunechoe.github.io/jlme/news/index.html","id":"jlme-development-version","dir":"Changelog","previous_headings":"","what":"jlme (development version)","title":"jlme (development version)","text":"Experimental support MixedModels.parametricbootstrap() via parametricbootstrap() tidy() method. jlme_setup() gains add argument accepts character vector additional Julia libraries install load initializing session. common workflows MixedModels.jl re-exported functions: propertynames(), issingular()","code":""},{"path":"https://yjunechoe.github.io/jlme/news/index.html","id":"jlme-010","dir":"Changelog","previous_headings":"","what":"jlme 0.1.0","title":"jlme 0.1.0","text":"CRAN release: 2024-07-02 CRAN release","code":""}]
