[{"path":"https://yjunechoe.github.io/jlme/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"June Choe. Author, maintainer.","code":""},{"path":"https://yjunechoe.github.io/jlme/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Choe J (2024). jlme: Regression Modelling 'GLM.jl' 'MixedModels.jl' 'Julia'. R package version 0.4.0, https://github.com/yjunechoe/jlme/, https://yjunechoe.github.io/jlme/.","code":"@Manual{,   title = {jlme: Regression Modelling with 'GLM.jl' and 'MixedModels.jl' in 'Julia'},   author = {June Choe},   year = {2024},   note = {R package version 0.4.0, https://github.com/yjunechoe/jlme/},   url = {https://yjunechoe.github.io/jlme/}, }"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"jlme","dir":"","previous_headings":"","what":"jlme","title":"jlme","text":"Julia (mixed-effects) regression modelling R. Powered {JuliaConnectoR} R package Julia libraries GLM, StatsModels, MixedModels.","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"jlme","text":"can install development version jlme GitHub : jlme experimental active development: see NEWS.md latest updates.","code":"# install.packages(\"remotes\") remotes::install_github(\"yjunechoe/jlme\")"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"jlme","text":"Using jlme requires prior installation Julia programming language, can downloaded either official website using command line utility juliaup. encountering issues setting Julia, please make sure ’re latest version (>=1.1.4) {JuliaConnectoR} package installed see ?JuliaConnectoR::`Julia-Setup` troubleshooting.","code":"library(jlme) jlme_setup()"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"usage-table-of-contents","dir":"","previous_headings":"","what":"Usage (table of contents)","title":"jlme","text":"Fit models Diagnose models Assess uncertainty Julia interoperability Tips tricks Acknowledgments","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"fit-models","dir":"","previous_headings":"","what":"Fit models","title":"jlme","text":"↑Back table contents set , (g)lm() (g)lmer complements Julia available via jlm() jlmer(), respectively.","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"fixed-effects-models","dir":"","previous_headings":"Fit models","what":"Fixed effects models","title":"jlme","text":"jlm() lm()/glm() syntax: Contrasts factor columns preserved:","code":"# lm(mpg ~ hp, mtcars) jlm(mpg ~ hp, mtcars) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + hp #>  #> ──────────────────────────────────────────────────────────────────────────── #>                   Coef.  Std. Error      z  Pr(>|z|)   Lower 95%   Upper 95% #> ──────────────────────────────────────────────────────────────────────────── #> (Intercept)  30.0989      1.63392    18.42    <1e-75  26.8964     33.3013 #> hp           -0.0682283   0.0101193  -6.74    <1e-10  -0.0880617  -0.0483948 #> ──────────────────────────────────────────────────────────────────────────── x <- mtcars  # Sum code `am` x$am_sum <- factor(x$am) contrasts(x$am_sum) <- contr.sum(2) # Helmert code `cyl` x$cyl_helm <- factor(x$cyl) contrasts(x$cyl_helm) <- contr.helmert(3) colnames(contrasts(x$cyl_helm)) <- c(\"4vs6\", \"4&6vs8\")  jlm(mpg ~ am_sum + cyl_helm, x) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + am_sum + cyl_helm #>  #> ─────────────────────────────────────────────────────────────────────────────── #>                      Coef.  Std. Error      z  Pr(>|z|)  Lower 95%    Upper 95% #> ─────────────────────────────────────────────────────────────────────────────── #> (Intercept)       20.6739     0.572633  36.10    <1e-99   19.5516   21.7963 #> am_sum: 1         -1.27998    0.648789  -1.97    0.0485   -2.55158  -0.00837293 #> cyl_helm: 4vs6    -3.07806    0.767861  -4.01    <1e-04   -4.58304  -1.57308 #> cyl_helm: 4&6vs8  -2.32983    0.414392  -5.62    <1e-07   -3.14203  -1.51764 #> ───────────────────────────────────────────────────────────────────────────────"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"mixed-effects-models","dir":"","previous_headings":"Fit models","what":"Mixed effects models","title":"jlme","text":"jlmer() lmer()/glmer() syntax:","code":"# lme4::lmer(Reaction ~ Days + (Days | Subject), lme4::sleepstudy) jlmer(Reaction ~ Days + (Days | Subject), lme4::sleepstudy, REML = TRUE) #> <Julia object of type LinearMixedModel> #>  #> Linear mixed model fit by REML #>  Reaction ~ 1 + Days + (1 + Days | Subject) #>  REML criterion at convergence: 1743.6282719599653 #>  #> Variance components: #>             Column    Variance Std.Dev.   Corr. #> Subject  (Intercept)  612.10016 24.74066 #>          Days          35.07171  5.92214 +0.07 #> Residual              654.94001 25.59180 #>  Number of obs: 180; levels of grouping factors: 18 #>  #>   Fixed-effects parameters: #> ────────────────────────────────────────────────── #>                 Coef.  Std. Error      z  Pr(>|z|) #> ────────────────────────────────────────────────── #> (Intercept)  251.405      6.8246   36.84    <1e-99 #> Days          10.4673     1.54579   6.77    <1e-10 #> ────────────────────────────────────────────────── # lme4::glmer(r2 ~ Anger + Gender + (1 | id), lme4::VerbAgg, family = \"binomial\") jlmer(r2 ~ Anger + Gender + (1 | id), lme4::VerbAgg, family = \"binomial\") #> <Julia object of type GeneralizedLinearMixedModel> #>  #> Generalized Linear Mixed Model fit by maximum likelihood (nAGQ = 1) #>   r2 ~ 1 + Anger + Gender + (1 | id) #>   Distribution: Bernoulli{Float64} #>   Link: LogitLink() #>  #>    logLik    deviance     AIC       AICc        BIC     #>  -4748.2525  9496.5050  9504.5050  9504.5102  9532.2401 #>  #> Variance components: #>       Column   VarianceStd.Dev. #> id (Intercept)  1.12074 1.05865 #>  #>  Number of obs: 7584; levels of grouping factors: 316 #>  #> Fixed-effects parameters: #> ──────────────────────────────────────────────────── #>                   Coef.  Std. Error      z  Pr(>|z|) #> ──────────────────────────────────────────────────── #> (Intercept)  -1.10115     0.280681   -3.92    <1e-04 #> Anger         0.0462741   0.0134906   3.43    0.0006 #> Gender: M     0.260057    0.153847    1.69    0.0910 #> ────────────────────────────────────────────────────"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"diagnose-models","dir":"","previous_headings":"","what":"Diagnose models","title":"jlme","text":"↑Back table contents Supports broom-style tidy() glance() methods Julia regression models.","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"summarize-model-fit","dir":"","previous_headings":"Diagnose models","what":"Summarize model fit","title":"jlme","text":"Get information model components tidy() Get goodness--fit measures model glance()","code":"# Note that MixedModels/`jlmer()` defaults to ML (REML=false) jmod <- jlmer(Reaction ~ Days + (Days | Subject), lme4::sleepstudy) tidy(jmod) #>      effect    group                  term     estimate std.error statistic #> 1     fixed     <NA>           (Intercept) 251.40510485  6.632258 37.906414 #> 2     fixed     <NA>                  Days  10.46728596  1.502236  6.967806 #> 12 ran_pars  Subject       sd__(Intercept)  23.78046792        NA        NA #> 3  ran_pars  Subject cor__(Intercept).Days   0.08133207        NA        NA #> 21 ran_pars  Subject              sd__Days   5.71682816        NA        NA #> 11 ran_pars Residual       sd__Observation  25.59182388        NA        NA #>          p.value #> 1  2.017794e-314 #> 2   3.219214e-12 #> 12            NA #> 3             NA #> 21            NA #> 11            NA glance(jmod) #>   nobs df    sigma    logLik      AIC      BIC deviance df.residual #> 1  180  6 25.59182 -875.9697 1763.939 1783.097 1751.939         174"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"inspect-model-objects","dir":"","previous_headings":"Diagnose models","what":"Inspect model objects","title":"jlme","text":"Check singular fit List properties MixedModel object (properties accessible via $) Check optimization summary","code":"issingular(jmod) #> [1] FALSE propertynames(jmod) #>  [1] \"A\"         \"b\"         \"beta\"      \"betas\"     \"corr\"      \"dims\"      #>  [7] \"feterm\"    \"formula\"   \"L\"         \"lambda\"    \"lowerbd\"   \"objective\" #> [13] \"optsum\"    \"parmap\"    \"PCA\"       \"pvalues\"   \"rePCA\"     \"reterms\"   #> [19] \"sigma\"     \"sigmarhos\" \"sigmas\"    \"sqrtwts\"   \"stderror\"  \"theta\"     #> [25] \"u\"         \"vcov\"      \"X\"         \"Xymat\"     \"y\"         \"β\"         #> [31] \"βs\"        \"θ\"         \"λ\"         \"σ\"         \"σs\"        \"σρs\" jmod$optsum #> <Julia object of type OptSummary{Float64}> #> Initial parameter vector: [1.0, 0.0, 1.0] #> Initial objective value:  1784.642296192471 #>  #> Optimizer (from NLopt):   LN_BOBYQA #> Lower bounds:             [0.0, -Inf, 0.0] #> ftol_rel:                 1.0e-12 #> ftol_abs:                 1.0e-8 #> xtol_rel:                 0.0 #> xtol_abs:                 [1.0e-10, 1.0e-10, 1.0e-10] #> initial_step:             [0.75, 1.0, 0.75] #> maxfeval:                 -1 #> maxtime:                  -1.0 #>  #> Function evaluations:     57 #> Final parameter vector:   [0.9292213025841999, 0.018168360086059557, 0.22264488361408383] #> Final objective value:    1751.9393444646894 #> Return code:              FTOL_REACHED"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"assess-uncertainty","dir":"","previous_headings":"","what":"Assess uncertainty","title":"jlme","text":"↑Back table contents Functions parametricbootstrap() profilelikelihood() can used assess variability parameter estimates.","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"parametric-bootstrap","dir":"","previous_headings":"Assess uncertainty","what":"Parametric bootstrap","title":"jlme","text":"Experimental support MixedModels.parametricbootstrap via parametricbootstrap():","code":"samp <- parametricbootstrap(jmod, nsim = 100L, seed = 42L) samp #> <Julia object of type MixedModelBootstrap{Float64}> #> MixedModelBootstrap with 100 samples #>      parameter  min        q25         median     mean       q75        max #>    ┌──────────────────────────────────────────────────────────────────────────── #>  1 │ β1         228.0      246.58      250.863    250.977    256.082    264.406 #>  2 │ β2         6.72055    9.91274     10.8382    10.696     11.6725    13.7769 #>  3 │ σ          21.6856    24.6536     25.6211    25.838     26.7439    30.5968 #>  4 │ σ1         3.57556    17.8908     22.1421    21.5799    25.6259    31.9446 #>  5 │ σ2         1.63637    4.53406     5.36349    5.47536    6.38651    8.34052 #>  6 │ ρ1         -0.739267  -0.226513   0.120712   0.107686   0.389495   1.0 #>  7 │ θ1         0.146373   0.675859    0.845334   0.839596   1.02343    1.29287 #>  8 │ θ2         -0.18147   -0.0508505  0.0248657  0.0155747  0.0708033  0.226194 #>  9 │ θ3         0.0        0.156785    0.193042   0.188678   0.238505   0.334108 tidy(samp) #>     effect    group                  term     estimate    conf.low  conf.high #> 1    fixed     <NA>           (Intercept) 251.40510485 240.8972974 263.280668 #> 2    fixed     <NA>                  Days  10.46728596   7.7302901  13.540729 #> 5 ran_pars  Subject       sd__(Intercept)  23.78046792  12.5974975  31.944579 #> 4 ran_pars  Subject cor__(Intercept).Days   0.08133207  -0.5948863   1.000000 #> 6 ran_pars  Subject              sd__Days   5.71682816   3.6653412   8.073549 #> 3 ran_pars Residual       sd__Observation  25.59182388  22.4968576  29.124647"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"profiling","dir":"","previous_headings":"Assess uncertainty","what":"Profiling","title":"jlme","text":"Experimental support MixedModels.profile via profilelikelihood():","code":"prof <- profilelikelihood(jmod) prof #> <Julia object of type MixedModelProfile{Float64}> #> MixedModelProfile -- Table with 11 columns and 176 rows: #>       p  ζ          β1       β2       σ        σ1       σ2       ρ1           ⋯ #>     ┌────────────────────────────────────────────────────────────────────────── #>  1  │ σ  -4.365     251.405  10.4673  20.1933  25.5128  5.97319  -0.0159232   ⋯ #>  2  │ σ  -3.77902   251.405  10.4673  20.8002  25.3434  5.94786  -0.00711109  ⋯ #>  3  │ σ  -3.20526   251.405  10.4673  21.4255  25.1627  5.92133  0.00263598   ⋯ #>  4  │ σ  -2.64336   251.405  10.4673  22.0695  24.9702  5.89214  0.0129078    ⋯ #>  5  │ σ  -2.09298   251.405  10.4673  22.7328  24.7636  5.86167  0.0241968    ⋯ #>  6  │ σ  -1.55378   251.405  10.4673  23.4162  24.5426  5.82871  0.0366992    ⋯ #>  7  │ σ  -1.02542   251.405  10.4673  24.12    24.3063  5.79389  0.0501628    ⋯ #>  8  │ σ  -0.507597  251.405  10.4673  24.845   24.0525  5.75669  0.0649969    ⋯ #>  9  │ σ  0.0        251.405  10.4673  25.5918  23.7805  5.71683  0.0813321    ⋯ #>  10 │ σ  0.497684   251.405  10.4673  26.3611  23.4885  5.6743   0.0993046    ⋯ #>  11 │ σ  0.985728   251.405  10.4673  27.1534  23.1743  5.62882  0.119204     ⋯ #>  12 │ σ  1.46442    251.405  10.4673  27.9696  22.836   5.5802   0.141262     ⋯ #>  13 │ σ  1.93402    251.405  10.4673  28.8104  22.4727  5.52809  0.165869     ⋯ #>  14 │ σ  2.39481    251.405  10.4673  29.6763  22.0799  5.47226  0.193415     ⋯ #>  15 │ σ  2.84704    251.405  10.4673  30.5684  21.6557  5.41243  0.224387     ⋯ #>  16 │ σ  3.29094    251.405  10.4673  31.4872  21.196   5.34818  0.259442     ⋯ #>  17 │ σ  3.72677    251.405  10.4673  32.4337  20.6956  5.27882  0.299408     ⋯ #>  ⋮  │ ⋮      ⋮         ⋮        ⋮        ⋮        ⋮        ⋮          ⋮       ⋱ tidy(prof) #>      effect    group            term   estimate   conf.low  conf.high #> 1     fixed     <NA>     (Intercept) 251.405105 237.680694 265.129516 #> 2     fixed     <NA>            Days  10.467286   7.358653  13.575919 #> 12 ran_pars  Subject sd__(Intercept)  23.780468  14.381431  37.718099 #> 21 ran_pars  Subject        sd__Days   5.716828   0.000000   8.753389 #> 11 ran_pars Residual sd__Observation  25.591824  22.898262  28.858001"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"julia-interoperability","dir":"","previous_headings":"","what":"Julia interoperability","title":"jlme","text":"↑Back table contents Functions jl_get() jl_put() transfers data R Julia.","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"bring-julia-objects-into-r","dir":"","previous_headings":"Julia interoperability","what":"Bring Julia objects into R","title":"jlme","text":"Example 1: extract PCA random effects return R list: Example 2: extract fitlog plot","code":"jmod$rePCA #> <Julia object of type @NamedTuple{Subject::Vector{Float64}}> #> (Subject = [0.5406660352881864, 1.0],) jl_get(jmod$rePCA) #> $Subject #> [1] 0.540666 1.000000 fitlog <- jl_get(jl(\"refit!(deepcopy(x); thin=1)\", x = jmod)$optsum$fitlog) thetas <- t(sapply(fitlog, `[[`, 1)) matplot(thetas, type = \"o\", xlab = \"iterations\")"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"julia-session","dir":"","previous_headings":"Julia interoperability","what":"Julia session","title":"jlme","text":"See information running Julia environment (e.g., list loaded Julia libraries) jlme_status(): setup, jlme loads GLM, StatsModels, MixedModels, well specified jlme_setup(add). libraries Random (required parametricbootstrap()) loaded -needed basis.","code":"jlme_status() #> jlme 0.4.0  #> R version 4.4.1 (2024-06-14 ucrt)  #> Julia Version 1.10.5 #> Commit 6f3fdf7b36 (2024-08-27 14:19 UTC) #> Build Info: #>   Official https://julialang.org/ release #> Platform Info: #>   OS: Windows (x86_64-w64-mingw32) #>   CPU: 8 × 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz #>   WORD_SIZE: 64 #>   LIBM: libopenlibm #>   LLVM: libLLVM-15.0.7 (ORCJIT, tigerlake) #> Threads: 1 default, 0 interactive, 1 GC (on 8 virtual cores) #> Status `C:\\Users\\jchoe\\AppData\\Local\\Temp\\jl_QJShm4\\Project.toml` #>   [38e38edf] GLM v1.9.0 #>   [ff71e718] MixedModels v4.26.1 #>   [3eaba693] StatsModels v0.7.4 #>   [9a3f8284] Random"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"more-with-juliaconnector","dir":"","previous_headings":"Julia interoperability","what":"More with {JuliaConnectoR}","title":"jlme","text":"users typically need interact {JuliaConnectoR} directly, may useful extending jlme features packages Julia modelling ecosystem. simple way use juliaImport(), creates makeshift bindings Julia library. ’s example replicating workflow using Effects.empairs post-hoc pairwise comparisons: Note Julia DataFrame objects one can collected R data frame using .data.frame(). lets , example, apply p-value corrections using familiar p.adjust() function R, though option exists Julia well.","code":"# New model: 2 (M/F) by 3 (curse/scold/shout) factorial jmod2 <- jlmer(   r2 ~ Gender * btype + (1 | id),   data = lme4::VerbAgg,   family = \"binomial\" ) jmod2 #> <Julia object of type GeneralizedLinearMixedModel> #>  #> Generalized Linear Mixed Model fit by maximum likelihood (nAGQ = 1) #>   r2 ~ 1 + Gender + btype + Gender & btype + (1 | id) #>   Distribution: Bernoulli{Float64} #>   Link: LogitLink() #>  #>    logLik    deviance     AIC       AICc        BIC     #>  -4341.4933  8682.9867  8696.9867  8697.0014  8745.5232 #>  #> Variance components: #>       Column   VarianceStd.Dev. #> id (Intercept)  1.52160 1.23353 #>  #>  Number of obs: 7584; levels of grouping factors: 316 #>  #> Fixed-effects parameters: #> ───────────────────────────────────────────────────────────────── #>                               Coef.  Std. Error       z  Pr(>|z|) #> ───────────────────────────────────────────────────────────────── #> (Intercept)                0.738396   0.0956957    7.72    <1e-13 #> Gender: M                  0.404282   0.201612     2.01    0.0449 #> btype: scold              -1.01214    0.0742669  -13.63    <1e-41 #> btype: shout              -1.77376    0.0782721  -22.66    <1e-99 #> Gender: M & btype: scold   0.130832   0.156315     0.84    0.4026 #> Gender: M & btype: shout  -0.533658   0.168832    -3.16    0.0016 #> ───────────────────────────────────────────────────────────────── library(JuliaConnectoR) # First call downloads the library (takes a minute) Effects <- juliaImport(\"Effects\") # Call `Effects.empairs` using R syntax `Effects$empairs()` pairwise <- Effects$empairs(jmod2, dof = glance(jmod2)$df.residual) pairwise #> <Julia object of type DataFrames.DataFrame> #> 15×7 DataFrame #>  Row │ Gender  btype          r2: Y      err       dof    t          Pr(>|t|)  ⋯ #>      │ String  String         Float64    Float64   Int64  Float64    Float64   ⋯ #> ─────┼────────────────────────────────────────────────────────────────────────── #>    1 │ F > M   curse          -0.404282  0.201612   7577  -2.00524   0.0449725 ⋯ #>    2 │ F       curse > scold   1.01214   0.13461    7577   7.51901   6.15243e- #>    3 │ F > M   curse > scold   0.477022  0.196994   7577   2.4215    0.0154799 #>    4 │ F       curse > shout   1.77376   0.136284   7577  13.0152    2.57693e- #>    5 │ F > M   curse > shout   1.90314   0.202352   7577   9.4051    6.75459e- ⋯ #>    6 │ M > F   curse > scold   1.41642   0.201127   7577   7.0424    2.05522e- #>    7 │ M       curse > scold   0.881304  0.247263   7577   3.56424   0.0003671 #>    8 │ M > F   curse > shout   2.17805   0.202251   7577  10.769     7.53779e- #>    9 │ M       curse > shout   2.30742   0.251552   7577   9.17273   5.84715e- ⋯ #>   10 │ F > M   scold          -0.535114  0.196498   7577  -2.72326   0.0064789 #>   11 │ F       scold > shout   0.761627  0.135565   7577   5.61817   1.99834e- #>   12 │ F > M   scold > shout   0.891002  0.201868   7577   4.41378   1.02988e- #>   13 │ M > F   scold > shout   1.29674   0.197648   7577   6.56086   5.70179e- ⋯ #>   14 │ M       scold > shout   1.42612   0.247866   7577   5.75357   9.07797e- #>   15 │ F > M   shout           0.129376  0.202988   7577   0.637355  0.523913 #>                                                                 1 column omitted pairwise_df <- as.data.frame(pairwise) cbind(   pairwise_df[, 1:2],   round(pairwise_df[, 3:4], 2),   pvalue = format.pval(p.adjust(pairwise_df[, 7], \"bonferroni\"), 1) ) #>    Gender         btype r2..Y  err pvalue #> 1   F > M         curse -0.40 0.20  0.675 #> 2       F curse > scold  1.01 0.13  9e-13 #> 3   F > M curse > scold  0.48 0.20  0.232 #> 4       F curse > shout  1.77 0.14 <2e-16 #> 5   F > M curse > shout  1.90 0.20 <2e-16 #> 6   M > F curse > scold  1.42 0.20  3e-11 #> 7       M curse > scold  0.88 0.25  0.006 #> 8   M > F curse > shout  2.18 0.20 <2e-16 #> 9       M curse > shout  2.31 0.25 <2e-16 #> 10  F > M         scold -0.54 0.20  0.097 #> 11      F scold > shout  0.76 0.14  3e-07 #> 12  F > M scold > shout  0.89 0.20  2e-04 #> 13  M > F scold > shout  1.30 0.20  9e-10 #> 14      M scold > shout  1.43 0.25  1e-07 #> 15  F > M         shout  0.13 0.20  1.000"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"tips-and-tricks","dir":"","previous_headings":"","what":"Tips and tricks","title":"jlme","text":"↑Back table contents","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"displaying-mixedmodels","dir":"","previous_headings":"Tips and tricks","what":"Displaying MixedModels","title":"jlme","text":"MixedModels.jl supports various display formats mixed-effects models available jlme via format argument print():","code":"# Rendered via {knitr} with chunk option `results=\"asis\"` print(jmod, format = \"markdown\")"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"data-type-conversion","dir":"","previous_headings":"Tips and tricks","what":"Data type conversion","title":"jlme","text":"sure pass integers (vs. doubles) Julia functions expect Integer type: Dict (dictionary) data type common relevant modelling workflows Julia. jlme offers jl_dict() opinionated constructor usecase: See ?JuliaConnectoR::`JuliaConnectoR-package` comprehensive list data type conversion rules.","code":"jl_put(1) #> <Julia object of type Float64> #> 1.0 jl_put(1L) #> <Julia object of type Int64> #> 1 # Note use of `I()` to protect length-1 values as scalar jl_dict(a = 1:2, b = \"three\", c = I(4.5)) #> <Julia object of type Dict{Symbol, Any}> #> Dict{Symbol, Any} with 3 entries: #>   :a => [1, 2] #>   :b => [\"three\"] #>   :c => 4.5"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"performance-linear-algebra-backend","dir":"","previous_headings":"Tips and tricks","what":"Performance (linear algebra backend)","title":"jlme","text":"Using MKL.jl AppleAccelerate.jl may improve model fitting performance (see system requirements first). supplied add argument jlme_setup(), ensure loaded first, prior packages.","code":"# Not run jlme_setup(add = \"MKL\", restart = TRUE) jlme_status() # Should now see MKL loaded here"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"performance-data-transfer","dir":"","previous_headings":"Tips and tricks","what":"Performance (data transfer)","title":"jlme","text":"data large, sizable overhead come transferring data R Julia. also looking fit many models data, first filter keep columns need use jl_data() send data Julia. Julia object can used place R data frame. data custom contrasts, can use jl_contrasts() also convert Julia first passing model.","code":"data_r <- mtcars  # Keep only columns you need + convert with `jl_data()` data_julia <- jl_data(data_r[, c(\"mpg\", \"am\")])  jlm(mpg ~ am, data_julia) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + am #>  #> ──────────────────────────────────────────────────────────────────────── #>                 Coef.  Std. Error      z  Pr(>|z|)  Lower 95%  Upper 95% #> ──────────────────────────────────────────────────────────────────────── #> (Intercept)  17.1474      1.1246   15.25    <1e-51   14.9432     19.3515 #> am            7.24494     1.76442   4.11    <1e-04    3.78674    10.7031 #> ──────────────────────────────────────────────────────────────────────── data_r$am <- as.factor(data_r$am) contrasts(data_r$am) <- contr.sum(2)  data_julia <- jl_data(data_r[, c(\"mpg\", \"am\")]) contrasts_julia <- jl_contrasts(data_r)  jlm(mpg ~ am, data_julia, contrasts = contrasts_julia) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + am #>  #> ──────────────────────────────────────────────────────────────────────── #>                 Coef.  Std. Error      z  Pr(>|z|)  Lower 95%  Upper 95% #> ──────────────────────────────────────────────────────────────────────── #> (Intercept)  20.7698     0.882211  23.54    <1e-99   19.0407    22.4989 #> am: 1        -3.62247    0.882211  -4.11    <1e-04   -5.35157   -1.89337 #> ────────────────────────────────────────────────────────────────────────"},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"just-learn-julia","dir":"","previous_headings":"Tips and tricks","what":"Just learn Julia","title":"jlme","text":"spend non-negligible time fitting regression models work, please just learn Julia! ’s great high-level language feels close R syntax REPL-based workflow.","code":""},{"path":"https://yjunechoe.github.io/jlme/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"jlme","text":"↑Back table contents JuliaConnectoR R package powering R interface Julia. Julia packages GLM.jl, StatsModels, MixedModels.jl interfaces implementations (mixed effects) regression models.","code":""},{"path":"https://yjunechoe.github.io/jlme/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 jlme authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-model.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-model","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-model","text":"Helpers converting model specifications R Julia equivalents","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-model","text":"","code":"jl_formula(formula)  jl_contrasts(df, cols = NULL, show_code = FALSE)  jl_data(df)  jl_family(family = c(\"gaussian\", \"binomial\", \"poisson\"))"},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-model","text":"formula string formula object df data frame cols subset columns make contrast specifiations show_code Whether print corresponding Julia code side-effect family distributional family string <family> object","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-model","text":"Julia object type <JuliaProxy>","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-model","text":"","code":"# \\donttest{ jlme_setup(restart = TRUE) #> Starting Julia (v1.10.5) ... #> Successfully set up Julia connection. (30s)  # Set up model data in R x <- mtcars x$cyl_helm <- factor(x$cyl) contrasts(x$cyl_helm) <- contr.helmert(3) colnames(contrasts(x$cyl_helm)) <- c(\"4vs6\", \"4&6vs8\")  # Formula conversion with julia_formula <- jl_formula(mpg ~ am * cyl_helm) julia_formula #> <Julia object of type FormulaTerm{Term, Tuple{Term, Term, InteractionTerm{Tuple{Term, Term}}}}> #> FormulaTerm #> Response: #>   mpg(unknown) #> Predictors: #>   am(unknown) #>   cyl_helm(unknown) #>   am(unknown) & cyl_helm(unknown)  # Data frame conversion julia_data <- jl_data(x) julia_data #> <Julia object of type Table{@NamedTuple{mpg::Float64, cyl::Float64, disp::Float64, hp::Float64, drat::Float64, wt::Float64, qsec::Float64, vs::Float64, am::Float64, gear::Float64, carb::Float64, cyl_helm::String}, 1, @NamedTuple{mpg::Vector{Float64}, cyl::Vector{Float64}, disp::Vector{Float64}, hp::Vector{Float64}, drat::Vector{Float64}, wt::Vector{Float64}, qsec::Vector{Float64}, vs::Vector{Float64}, am::Vector{Float64}, gear::Vector{Float64}, carb::Vector{Float64}, cyl_helm::Vector{String}}}> #> Table with 12 columns and 32 rows: #>       mpg   cyl  disp   hp     drat  wt     qsec   vs   am   gear  carb  ⋯ #>     ┌───────────────────────────────────────────────────────────────────── #>  1  │ 21.0  6.0  160.0  110.0  3.9   2.62   16.46  0.0  1.0  4.0   4.0   ⋯ #>  2  │ 21.0  6.0  160.0  110.0  3.9   2.875  17.02  0.0  1.0  4.0   4.0   ⋯ #>  3  │ 22.8  4.0  108.0  93.0   3.85  2.32   18.61  1.0  1.0  4.0   1.0   ⋯ #>  4  │ 21.4  6.0  258.0  110.0  3.08  3.215  19.44  1.0  0.0  3.0   1.0   ⋯ #>  5  │ 18.7  8.0  360.0  175.0  3.15  3.44   17.02  0.0  0.0  3.0   2.0   ⋯ #>  6  │ 18.1  6.0  225.0  105.0  2.76  3.46   20.22  1.0  0.0  3.0   1.0   ⋯ #>  7  │ 14.3  8.0  360.0  245.0  3.21  3.57   15.84  0.0  0.0  3.0   4.0   ⋯ #>  8  │ 24.4  4.0  146.7  62.0   3.69  3.19   20.0   1.0  0.0  4.0   2.0   ⋯ #>  9  │ 22.8  4.0  140.8  95.0   3.92  3.15   22.9   1.0  0.0  4.0   2.0   ⋯ #>  10 │ 19.2  6.0  167.6  123.0  3.92  3.44   18.3   1.0  0.0  4.0   4.0   ⋯ #>  11 │ 17.8  6.0  167.6  123.0  3.92  3.44   18.9   1.0  0.0  4.0   4.0   ⋯ #>  12 │ 16.4  8.0  275.8  180.0  3.07  4.07   17.4   0.0  0.0  3.0   3.0   ⋯ #>  13 │ 17.3  8.0  275.8  180.0  3.07  3.73   17.6   0.0  0.0  3.0   3.0   ⋯ #>  14 │ 15.2  8.0  275.8  180.0  3.07  3.78   18.0   0.0  0.0  3.0   3.0   ⋯ #>  15 │ 10.4  8.0  472.0  205.0  2.93  5.25   17.98  0.0  0.0  3.0   4.0   ⋯ #>  16 │ 10.4  8.0  460.0  215.0  3.0   5.424  17.82  0.0  0.0  3.0   4.0   ⋯ #>  17 │ 14.7  8.0  440.0  230.0  3.23  5.345  17.42  0.0  0.0  3.0   4.0   ⋯ #>  ⋮  │  ⋮     ⋮     ⋮      ⋮     ⋮      ⋮      ⋮     ⋮    ⋮    ⋮     ⋮    ⋱  # Contrasts construction (`show_code = TRUE` pretty prints the Julia code) julia_contrasts <- jl_contrasts(x, show_code = TRUE) #> Dict( #>     :cyl_helm => HypothesisCoding( #>         [ #>             -1/2  1/2   0 #>             -1/6 -1/6 1/3 #>         ]; #>         levels = [\"4\", \"6\", \"8\"], #>         labels = [\"4vs6\", \"4&6vs8\"], #>     ), #> ) julia_contrasts #> <Julia object of type Dict{Symbol, HypothesisCoding{Matrix{Float64}, Matrix{Float64}}}> #> Dict{Symbol, HypothesisCoding{Matrix{Float64}, Matrix{Float64}}} with 1 entry: #>   :cyl_helm => HypothesisCoding{Matrix{Float64}, Matrix{Float64}}([-0.5 0.5 0.0…  # Family conversion julia_family <- jl_family(\"binomial\") julia_family #> <Julia object of type Bernoulli{Float64}> #> Bernoulli{Float64}(p=0.5)  stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-utils","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-utils","text":"Helpers converting model specifications R Julia equivalents","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-utils","text":"","code":"is_jl(x, type)  jl_put(x)  jl_get(x)  jl(expr, ..., .R = FALSE, .passthrough = FALSE)  jl_dict(...)"},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-utils","text":"x object type Type Julia object additional test expr string Julia code ... Interpolated elements. case jl():. named, elements introduced Julia variables expr unnamed, elements interpolated expr via sprintf() .R Whether simplify return R object, possible. .passthrough Whether return expr -already Julia object. Mostly internal use.","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-utils","text":"Julia object type <JuliaProxy>","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jl-helpers-utils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers for converting model specifications in R to Julia equivalents — jl-helpers-utils","text":"","code":"# \\donttest{ # (general) Use `jl()` to evaluate arbitrary Julia expressions from string jl(\"1 .+ [1,3]\") #> Starting Julia ... #> <Julia object of type Vector{Int64}> #> 2-element Vector{Int64}: #>  2 #>  4  # `jl()` takes elements in `...` that you can reference in the expression jl(\"1 .+ a\", a = c(1L, 3L)) # Named arguments are introduced as variables #> <Julia object of type Vector{Int64}> #> 2-element Vector{Int64}: #>  2 #>  4 jl(\"1 .+ %s\", \"[1,2]\") # Unnamed arguments are interpolated via `sprintf()` #> <Julia object of type Vector{Int64}> #> 2-element Vector{Int64}: #>  2 #>  3  # Use `is_jl()` to test if object is a Julia (`<JuliaProxy>`) object is_jl(jl(\"1\")) #> [1] TRUE  # Use `jl_put()` and `jl_get()` to transfer data between R and Julia jl_put(1L) #> <Julia object of type Int64> #> 1 identical(jl_get(jl_put(1L)), 1L) #> [1] TRUE  # `jl_dict()` opinionatedly constructs a Dictionary data type ## Basic `list()`-like usage jl_dict(age = 20:25, sex = c(\"M\", \"F\")) #> <Julia object of type Dict{Symbol, Any}> #> Dict{Symbol, Any} with 2 entries: #>   :age => [20, 21, 22, 23, 24, 25] #>   :sex => [\"M\", \"F\"] ## Splats when a single list is supplied jl_dict(list(a = 1, b = 2)) #> <Julia object of type Dict{Symbol, Any}> #> Dict{Symbol, Any} with 2 entries: #>   :a => [1.0] #>   :b => [2.0] ## Wrap scalars in `I()` to prevent vector conversion jl_dict(a = 1:2, b = 3:4, c = I(5)) #> <Julia object of type Dict{Symbol, Any}> #> Dict{Symbol, Any} with 3 entries: #>   :a => [1, 2] #>   :b => [3, 4] #>   :c => 5.0  stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a (mixed-effects) regression model in Julia — jlm","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"Fit (mixed-effects) regression model Julia","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"","code":"jlm(formula, data, family = \"gaussian\", contrasts = jl_contrasts(data), ...)  jlmer(   formula,   data,   family = NULL,   contrasts = jl_contrasts(data),   ...,   fit = TRUE,   optsum = list(),   progress = interactive() )"},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"formula formula written Julia syntax. Can string language object. data data frame family distribution family contrasts Julia dictionary contrasts Inferred data default. ... Additional arguments fit() function called Julia fit Whether fit model. FALSE, returns unfit model object. optsum list values set optimizer. See $optsum unfit model possible options. progress Whether print model fitting progress. Defaults interactive()","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"julia model object class jlme","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a (mixed-effects) regression model in Julia — jlm","text":"","code":"# \\donttest{ jlme_setup(restart = TRUE) #> Starting Julia (v1.10.5) ... #> Successfully set up Julia connection. (13s)  # Fixed effects models lm(mpg ~ hp, mtcars) #>  #> Call: #> lm(formula = mpg ~ hp, data = mtcars) #>  #> Coefficients: #> (Intercept)           hp   #>    30.09886     -0.06823   #>  jlm(mpg ~ hp, mtcars) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + hp #>  #> ──────────────────────────────────────────────────────────────────────────── #>                   Coef.  Std. Error      z  Pr(>|z|)   Lower 95%   Upper 95% #> ──────────────────────────────────────────────────────────────────────────── #> (Intercept)  30.0989      1.63392    18.42    <1e-75  26.8964     33.3013 #> hp           -0.0682283   0.0101193  -6.74    <1e-10  -0.0880617  -0.0483948 #> ────────────────────────────────────────────────────────────────────────────   # Auto-handling of contrasts x <- mtcars x$cyl_helm <- factor(x$cyl) contrasts(x$cyl_helm) <- contr.helmert(3) colnames(contrasts(x$cyl_helm)) <- c(\"4vs6\", \"4&6vs8\") lm(mpg ~ cyl_helm, x) #>  #> Call: #> lm(formula = mpg ~ cyl_helm, data = x) #>  #> Coefficients: #>    (Intercept)    cyl_helm4vs6  cyl_helm4&6vs8   #>         20.502          -3.460          -2.701   #>  jlm(mpg ~ cyl_helm, x) #> <Julia object of type StatsModels.TableRegressionModel> #>  #> mpg ~ 1 + cyl_helm #>  #> ───────────────────────────────────────────────────────────────────────────── #>                      Coef.  Std. Error      z  Pr(>|z|)  Lower 95%  Upper 95% #> ───────────────────────────────────────────────────────────────────────────── #> (Intercept)       20.5022     0.593528  34.54    <1e-99   19.3389    21.6655 #> cyl_helm: 4vs6    -3.46039    0.779174  -4.44    <1e-05   -4.98754   -1.93324 #> cyl_helm: 4&6vs8  -2.70108    0.387175  -6.98    <1e-11   -3.45993   -1.94223 #> ─────────────────────────────────────────────────────────────────────────────   # Mixed effects models library(lme4) #> Loading required package: Matrix  glmer(r2 ~ Anger + Gender + (1 | id), VerbAgg, family = \"binomial\") #> Generalized linear mixed model fit by maximum likelihood (Laplace #>   Approximation) [glmerMod] #>  Family: binomial  ( logit ) #> Formula: r2 ~ Anger + Gender + (1 | id) #>    Data: VerbAgg #>       AIC       BIC    logLik  deviance  df.resid  #>  9504.505  9532.240 -4748.253  9496.505      7580  #> Random effects: #>  Groups Name        Std.Dev. #>  id     (Intercept) 1.059    #> Number of obs: 7584, groups:  id, 316 #> Fixed Effects: #> (Intercept)        Anger      GenderM   #>    -1.10090      0.04626      0.26002   jlmer(r2 ~ Anger + Gender + (1 | id), VerbAgg, family = \"binomial\") #> <Julia object of type GeneralizedLinearMixedModel> #>  #> Generalized Linear Mixed Model fit by maximum likelihood (nAGQ = 1) #>   r2 ~ 1 + Anger + Gender + (1 | id) #>   Distribution: Bernoulli{Float64} #>   Link: LogitLink() #>  #>    logLik    deviance     AIC       AICc        BIC     #>  -4748.2525  9496.5050  9504.5050  9504.5102  9532.2401 #>  #> Variance components: #>       Column   VarianceStd.Dev. #> id (Intercept)  1.12074 1.05865 #>  #>  Number of obs: 7584; levels of grouping factors: 316 #>  #> Fixed-effects parameters: #> ──────────────────────────────────────────────────── #>                   Coef.  Std. Error      z  Pr(>|z|) #> ──────────────────────────────────────────────────── #> (Intercept)  -1.10115     0.280681   -3.92    <1e-04 #> Anger         0.0462741   0.0134906   3.43    0.0006 #> Gender: M     0.260057    0.153847    1.69    0.0910 #> ────────────────────────────────────────────────────   # Set optimizer options via `optsum` jlmer(   r2 ~ Anger + Gender + (1 | id), VerbAgg, family = \"binomial\",   optsum = list(     optimizer = jl(\":LN_NELDERMEAD\"),     maxfeval = 10L   ) ) #> <Julia object of type GeneralizedLinearMixedModel> #>  #> Generalized Linear Mixed Model fit by maximum likelihood (nAGQ = 1) #>   r2 ~ 1 + Anger + Gender + (1 | id) #>   Distribution: Bernoulli{Float64} #>   Link: LogitLink() #>  #>    logLik    deviance     AIC       AICc        BIC     #>  -4749.2651  9498.5303  9506.5303  9506.5356  9534.2655 #>  #> Variance components: #>       Column   VarianceStd.Dev. #> id (Intercept)  1.0 1.0 #>  #>  Number of obs: 7584; levels of grouping factors: 316 #>  #> Fixed-effects parameters: #> ──────────────────────────────────────────────────── #>                   Coef.  Std. Error      z  Pr(>|z|) #> ──────────────────────────────────────────────────── #> (Intercept)  -0.851285     0.267259  -3.19    0.0014 #> Anger         0.0353915    0.012845   2.76    0.0059 #> Gender: M     0.204939     0.14652    1.40    0.1619 #> ────────────────────────────────────────────────────   stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-exported functions for interacting with Julia model objects — jlme-model-reexports","title":"Re-exported functions for interacting with Julia model objects — jlme-model-reexports","text":"Re-exported functions interacting Julia model objects","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-reexports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-exported functions for interacting with Julia model objects — jlme-model-reexports","text":"","code":"propertynames(x)  issingular(x)  likelihoodratiotest(x, ...)"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-reexports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-exported functions for interacting with Julia model objects — jlme-model-reexports","text":"x Julia model object ... Additional arguments passed Julia function","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-reexports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-exported functions for interacting with Julia model objects — jlme-model-reexports","text":"appropriate R Julia object","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-model-reexports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-exported functions for interacting with Julia model objects — jlme-model-reexports","text":"","code":"# \\donttest{ jlme_setup(restart = TRUE) #> Starting Julia (v1.10.5) ... #> Successfully set up Julia connection. (13s)  x <- jlmer(r2 ~ Anger + (1 | id), lme4::VerbAgg, family = \"binomial\")  # `propertynames()` lists properties accessible via `$` propertynames(x) #>  [1] \"A\"         \"L\"         \"LMM\"       \"PCA\"       \"X\"         \"b\"         #>  [7] \"beta\"      \"coef\"      \"corr\"      \"lowerbd\"   \"objective\" \"rePCA\"     #> [13] \"resp\"      \"sigma\"     \"theta\"     \"u\"         \"vcov\"      \"wt\"        #> [19] \"y\"         \"β\"         \"θ\"         \"λ\"         \"σ\"         \"σs\"        #> [25] \"σρs\"        # `issingular()` reports whether model has singular fit issingular(x) #> [1] FALSE  # `likelihoodratiotest()` conducts a likelihood-ratio test between nested models likelihoodratiotest(   x,   jlmer(r2 ~ 1 + (1 | id), lme4::VerbAgg, family = \"binomial\") ) #> <Julia object of type MixedModels.LikelihoodRatioTest> #> Model Formulae #> 1: r2 ~ 1 + (1 | id) #> 2: r2 ~ 1 + Anger + (1 | id) #> ────────────────────────────────────────────────── #>      model-dof   deviance       χ²  χ²-dof  P(>χ²) #> ────────────────────────────────────────────────── #> [1]          2  9510.5478                          #> [2]          3  9499.3324  11.2154       1  0.0008 #> ──────────────────────────────────────────────────  stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-package.html","id":null,"dir":"Reference","previous_headings":"","what":"jlme: Regression Modelling with 'GLM.jl' and 'MixedModels.jl' in 'Julia' — jlme-package","title":"jlme: Regression Modelling with 'GLM.jl' and 'MixedModels.jl' in 'Julia' — jlme-package","text":"Bindings 'Julia' packages 'GLM.jl' doi:10.5281/zenodo.3376013  'MixedModels.jl' doi:10.5281/zenodo.12575371 , powered 'JuliaConnectoR'. Fits (generalized) linear (mixed-effects) regression models 'Julia' using familiar model fitting syntax R. Offers 'broom'-style data frame summary functionalities 'Julia' regression models.","code":""},{"path":[]},{"path":"https://yjunechoe.github.io/jlme/reference/jlme-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"jlme: Regression Modelling with 'GLM.jl' and 'MixedModels.jl' in 'Julia' — jlme-package","text":"Maintainer: June Choe jchoe001@gmail.com (ORCID)","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Julia connection for jlme — check_julia_ok","title":"Set up Julia connection for jlme — check_julia_ok","text":"Set Julia connection jlme","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Julia connection for jlme — check_julia_ok","text":"","code":"check_julia_ok()  stop_julia()  jlme_status()  jlme_setup(   ...,   add = NULL,   restart = FALSE,   threads = NULL,   verbose = interactive() )"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up Julia connection for jlme — check_julia_ok","text":"... Unused add character vector additional Julia packages add load. restart Whether run stop_julia() first, attempting setup threads Number threads start Julia . Defaults 1 verbose Whether alert setup progress. Defaults interactive()","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up Julia connection for jlme — check_julia_ok","text":"Invisibly returns TRUE success","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up Julia connection for jlme — check_julia_ok","text":"","code":"# \\donttest{ # Check whether Julia installation meets requirements check_julia_ok() #> [1] TRUE  # Connect to a Julia runtime for use with `{jlme}` jlme_setup() #> Starting Julia (v1.10.5) ... #> Successfully set up Julia connection. (13s)  # Show information about the Julia runtime jlme_status() #> jlme 0.4.0  #> R version 4.4.1 (2024-06-14 ucrt)  #> Julia Version 1.10.5 #> Commit 6f3fdf7b36 (2024-08-27 14:19 UTC) #> Build Info: #>   Official https://julialang.org/ release #> Platform Info: #>   OS: Windows (x86_64-w64-mingw32) #>   CPU: 8 × 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz #>   WORD_SIZE: 64 #>   LIBM: libopenlibm #>   LLVM: libLLVM-15.0.7 (ORCJIT, tigerlake) #> Threads: 1 default, 0 interactive, 1 GC (on 8 virtual cores) #> Status `C:\\Users\\jchoe\\AppData\\Local\\Temp\\jl_ouds3J\\Project.toml` #>   [38e38edf] GLM v1.9.0 #>   [ff71e718] MixedModels v4.26.1 #>   [3eaba693] StatsModels v0.7.4  # Stop Julia runtime stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_tidiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidier methods for Julia regression models — tidy.jlmeboot","title":"Tidier methods for Julia regression models — tidy.jlmeboot","text":"Tidier methods Julia regression models","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_tidiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidier methods for Julia regression models — tidy.jlmeboot","text":"","code":"# S3 method for class 'jlmeboot' tidy(x, effects = c(\"var_model\", \"ran_pars\", \"fixed\"), ...)  # S3 method for class 'jlmeprof' tidy(x, effects = c(\"var_model\", \"ran_pars\", \"fixed\"), ...)  # S3 method for class 'jlme' tidy(x, effects = c(\"var_model\", \"ran_pars\", \"fixed\"), ...)  # S3 method for class 'jlme' glance(x, ...)"},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_tidiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidier methods for Julia regression models — tidy.jlmeboot","text":"x object class jlme effects One \"var_model\", \"ran_pars\", \"fixed\" ... Unused","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/jlme_tidiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidier methods for Julia regression models — tidy.jlmeboot","text":"data frame","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"Parametric bootstrap Julia mixed effects models","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"","code":"parametricbootstrap(   x,   nsim,   seed,   ...,   optsum_overrides = list(ftol_rel = 1e-08) )"},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"x Julia MixedModel class jlme nsim Number simulations seed Seed random number generator (Random.MersenneTwister) ... implemented optsum_overrides Values override OptSummary.","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"MixedModels.parametricboostrap() output object class jlmeboot","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/parametricbootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric bootstrap for Julia mixed effects models — parametricbootstrap","text":"","code":"# \\donttest{ jlme_setup(restart = TRUE) #> Starting Julia (v1.10.5) ... #> Successfully set up Julia connection. (13s)  jmod <- jlmer(Reaction ~ Days + (Days | Subject), lme4::sleepstudy) tidy(jmod) #> # A tibble: 6 × 7 #>   effect   group    term                 estimate std.error statistic    p.value #>   <chr>    <chr>    <chr>                   <dbl>     <dbl>     <dbl>      <dbl> #> 1 fixed    NA       (Intercept)          251.          6.63     37.9   2.02e-314 #> 2 fixed    NA       Days                  10.5         1.50      6.97  3.22e- 12 #> 3 ran_pars Subject  sd__(Intercept)       23.8        NA        NA    NA         #> 4 ran_pars Subject  cor__(Intercept).Da…   0.0813     NA        NA    NA         #> 5 ran_pars Subject  sd__Days               5.72       NA        NA    NA         #> 6 ran_pars Residual sd__Observation       25.6        NA        NA    NA          samp <- parametricbootstrap(jmod, nsim = 100L, seed = 42L) samp #> <Julia object of type MixedModelBootstrap{Float64}> #> MixedModelBootstrap with 100 samples #>      parameter  min        q25         median     mean       q75        max #>    ┌──────────────────────────────────────────────────────────────────────────── #>  1 │ β1         228.0      246.58      250.863    250.977    256.082    264.406 #>  2 │ β2         6.72055    9.91274     10.8382    10.696     11.6725    13.7769 #>  3 │ σ          21.6856    24.6536     25.6211    25.838     26.7439    30.5968 #>  4 │ σ1         3.57556    17.8908     22.1421    21.5799    25.6259    31.9446 #>  5 │ σ2         1.63637    4.53406     5.36349    5.47536    6.38651    8.34052 #>  6 │ ρ1         -0.739267  -0.226513   0.120712   0.107686   0.389495   1.0 #>  7 │ θ1         0.146373   0.675859    0.845334   0.839596   1.02343    1.29287 #>  8 │ θ2         -0.18147   -0.0508505  0.0248657  0.0155747  0.0708033  0.226194 #>  9 │ θ3         0.0        0.156785    0.193042   0.188678   0.238505   0.334108 #>   tidy(samp) #> # A tibble: 6 × 6 #>   effect   group    term                  estimate conf.low conf.high #>   <chr>    <chr>    <chr>                    <dbl>    <dbl>     <dbl> #> 1 fixed    NA       (Intercept)           251.      241.       263.   #> 2 fixed    NA       Days                   10.5       7.73      13.5  #> 3 ran_pars Subject  sd__(Intercept)        23.8      12.6       31.9  #> 4 ran_pars Subject  cor__(Intercept).Days   0.0813   -0.595      1    #> 5 ran_pars Subject  sd__Days                5.72      3.67       8.07 #> 6 ran_pars Residual sd__Observation        25.6      22.5       29.1   stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/profilelikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Profile the likelihood surface of Julia mixed effects models — profilelikelihood","title":"Profile the likelihood surface of Julia mixed effects models — profilelikelihood","text":"Profile likelihood surface Julia mixed effects models","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/profilelikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile the likelihood surface of Julia mixed effects models — profilelikelihood","text":"","code":"profilelikelihood(x, ...)"},{"path":"https://yjunechoe.github.io/jlme/reference/profilelikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile the likelihood surface of Julia mixed effects models — profilelikelihood","text":"x Julia MixedModel class jlme ... implemented","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/profilelikelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Profile the likelihood surface of Julia mixed effects models — profilelikelihood","text":"MixedModels.profile() output object class jlmeprof","code":""},{"path":"https://yjunechoe.github.io/jlme/reference/profilelikelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Profile the likelihood surface of Julia mixed effects models — profilelikelihood","text":"","code":"# \\donttest{ jlme_setup(restart = TRUE) #> Starting Julia (v1.10.5) ... #> Successfully set up Julia connection. (13s)  jmod <- jlmer(Reaction ~ Days + (Days | Subject), lme4::sleepstudy) tidy(jmod) #> # A tibble: 6 × 7 #>   effect   group    term                 estimate std.error statistic    p.value #>   <chr>    <chr>    <chr>                   <dbl>     <dbl>     <dbl>      <dbl> #> 1 fixed    NA       (Intercept)          251.          6.63     37.9   2.02e-314 #> 2 fixed    NA       Days                  10.5         1.50      6.97  3.22e- 12 #> 3 ran_pars Subject  sd__(Intercept)       23.8        NA        NA    NA         #> 4 ran_pars Subject  cor__(Intercept).Da…   0.0813     NA        NA    NA         #> 5 ran_pars Subject  sd__Days               5.72       NA        NA    NA         #> 6 ran_pars Residual sd__Observation       25.6        NA        NA    NA          prof <- profilelikelihood(jmod) prof #> <Julia object of type MixedModelProfile{Float64}> #> MixedModelProfile -- Table with 11 columns and 176 rows: #>       p  ζ          β1       β2       σ        σ1       σ2       ρ1           ⋯ #>     ┌────────────────────────────────────────────────────────────────────────── #>  1  │ σ  -4.365     251.405  10.4673  20.1933  25.5128  5.97319  -0.0159232   ⋯ #>  2  │ σ  -3.77902   251.405  10.4673  20.8002  25.3434  5.94786  -0.00711109  ⋯ #>  3  │ σ  -3.20526   251.405  10.4673  21.4255  25.1627  5.92133  0.00263598   ⋯ #>  4  │ σ  -2.64336   251.405  10.4673  22.0695  24.9702  5.89214  0.0129078    ⋯ #>  5  │ σ  -2.09298   251.405  10.4673  22.7328  24.7636  5.86167  0.0241968    ⋯ #>  6  │ σ  -1.55378   251.405  10.4673  23.4162  24.5426  5.82871  0.0366992    ⋯ #>  7  │ σ  -1.02542   251.405  10.4673  24.12    24.3063  5.79389  0.0501628    ⋯ #>  8  │ σ  -0.507597  251.405  10.4673  24.845   24.0525  5.75669  0.0649969    ⋯ #>  9  │ σ  0.0        251.405  10.4673  25.5918  23.7805  5.71683  0.0813321    ⋯ #>  10 │ σ  0.497684   251.405  10.4673  26.3611  23.4885  5.6743   0.0993046    ⋯ #>  11 │ σ  0.985728   251.405  10.4673  27.1534  23.1743  5.62882  0.119204     ⋯ #>  12 │ σ  1.46442    251.405  10.4673  27.9696  22.836   5.5802   0.141262     ⋯ #>  13 │ σ  1.93402    251.405  10.4673  28.8104  22.4727  5.52809  0.165869     ⋯ #>  14 │ σ  2.39481    251.405  10.4673  29.6763  22.0799  5.47226  0.193415     ⋯ #>  15 │ σ  2.84704    251.405  10.4673  30.5684  21.6557  5.41243  0.224387     ⋯ #>  16 │ σ  3.29094    251.405  10.4673  31.4872  21.196   5.34818  0.259442     ⋯ #>  17 │ σ  3.72677    251.405  10.4673  32.4337  20.6956  5.27882  0.299408     ⋯ #>  ⋮  │ ⋮      ⋮         ⋮        ⋮        ⋮        ⋮        ⋮          ⋮       ⋱  tidy(prof) #> # A tibble: 5 × 6 #>   effect   group    term            estimate conf.low conf.high #>   <chr>    <chr>    <chr>              <dbl>    <dbl>     <dbl> #> 1 fixed    NA       (Intercept)       251.     238.      265.   #> 2 fixed    NA       Days               10.5      7.36     13.6  #> 3 ran_pars Subject  sd__(Intercept)    23.8     14.4      37.7  #> 4 ran_pars Subject  sd__Days            5.72     0         8.75 #> 5 ran_pars Residual sd__Observation    25.6     22.9      28.9   stop_julia() # }"},{"path":"https://yjunechoe.github.io/jlme/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics glance, tidy","code":""},{"path":[]},{"path":"https://yjunechoe.github.io/jlme/news/index.html","id":"jlme-040","dir":"Changelog","previous_headings":"","what":"jlme 0.4.0","title":"jlme 0.4.0","text":"CRAN release: 2024-10-09 New argument jlmer(fit = TRUE). FALSE, returns unfit model object. New function jl_dict() construct Dictionary object using list() syntax. Experimental support MixedModels.profile() via profilelikelihood() tidy() method Experimental implementation interface setting OptSummary values via jlmer(optsum = list(...)). New model helper function likelihoodratiotest() conducting likelihood-ratio tests nested models","code":""},{"path":"https://yjunechoe.github.io/jlme/news/index.html","id":"jlme-030","dir":"Changelog","previous_headings":"","what":"jlme 0.3.0","title":"jlme 0.3.0","text":"CRAN release: 2024-09-17 Better detection Julia executable New function jl() evaluate Julia expressions string return Julia objects, options interpolation R objects via .... New functions jl_get() jl_put(), wrappers around JuliaConnectoR::juliaGet() JuliaConnectoR::juliaPut(). parametricbootstrap() gains optsum_overrides argument accepts list values override model OptSummary. parametricbootstrap() now prints progress console.","code":""},{"path":"https://yjunechoe.github.io/jlme/news/index.html","id":"jlme-020","dir":"Changelog","previous_headings":"","what":"jlme 0.2.0","title":"jlme 0.2.0","text":"CRAN release: 2024-08-31 Experimental support MixedModels.parametricbootstrap() via parametricbootstrap() tidy() method. jlme_setup() gains add argument accepts character vector additional Julia libraries install load initializing session. common workflows MixedModels.jl re-exported functions: propertynames(), issingular()","code":""},{"path":"https://yjunechoe.github.io/jlme/news/index.html","id":"jlme-010","dir":"Changelog","previous_headings":"","what":"jlme 0.1.0","title":"jlme 0.1.0","text":"CRAN release: 2024-07-02 CRAN release","code":""}]
